afzal@afzal-350V5C-351V5C-3540VC-3440VC:~/Documents/Study material/Msc CS/SMT/major_Project/sp_z3_new/src/check_wp$ /usr/bin/time -v ./check_wp ../../tests/if_sat3.c 
file ../../tests/if_sat3.c: Parsing
file <command-line> line 0: <command-line>:0:0: warning: "__STDC_VERSION__" redefined
file <command-line> line 0: <built-in>: note: this is the location of the previous definition
Converting
Type-checking if_sat3
SP in assume is TRUE && x < 10
Equel exp is y == x + x
sp in one step is exists { irep("(\"bv\")") t4; y == x + x && x < 5 && x < 10 }
before else sp is !(x < 5) && x < 10
Equel exp is y == x
sp in one step is exists { irep("(\"bv\")") t6; y == x && !(x < 5) && x < 10 }
Equel exp is y == t7 + 1
sp in one step is exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; x < 5 && x < 10 && t7 == x + x }) || (exists { irep("(\"bv\")") t6; x < 10 && t7 == x && !(x < 5) })) }
Equel exp is x == 0
sp in one step is exists { irep("(\"bv\")") t9; x == 0 && y < 10 && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t9 < 5 && t9 < 10 && t7 == t9 + t9 }) || (exists { irep("(\"bv\")") t6; t9 < 10 && t7 == t9 && !(t9 < 5) })) }) }
before else sp is !(y < 10) && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; x < 5 && x < 10 && t7 == x + x }) || (exists { irep("(\"bv\")") t6; x < 10 && t7 == x && !(x < 5) })) })
Equel exp is x == 10
sp in one step is exists { irep("(\"bv\")") t11; x == 10 && !(y < 10) && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t11 < 5 && t11 < 10 && t7 == t11 + t11 }) || (exists { irep("(\"bv\")") t6; t11 < 10 && t7 == t11 && !(t11 < 5) })) }) }
Strongest postcondition is (exists { irep("(\"bv\")") t9; y < 10 && x == 0 && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t9 < 5 && t9 < 10 && t7 == t9 + t9 }) || (exists { irep("(\"bv\")") t6; t9 < 10 && t7 == t9 && !(t9 < 5) })) }) }) || (exists { irep("(\"bv\")") t11; x == 10 && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t11 < 5 && t11 < 10 && t7 == t11 + t11 }) || (exists { irep("(\"bv\")") t6; t11 < 10 && t7 == t11 && !(t11 < 5) })) }) && !(y < 10) })
Assert is x != 0
Final sp is (exists { irep("(\"bv\")") t9; y < 10 && x == 0 && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t9 < 5 && t9 < 10 && t7 == t9 + t9 }) || (exists { irep("(\"bv\")") t6; t9 < 10 && t7 == t9 && !(t9 < 5) })) }) }) || (exists { irep("(\"bv\")") t11; x == 10 && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t11 < 5 && t11 < 10 && t7 == t11 + t11 }) || (exists { irep("(\"bv\")") t6; t11 < 10 && t7 == t11 && !(t11 < 5) })) }) && !(y < 10) }) ==> x != 0

wp expression after cbmc phase: !((exists { irep("(\"bv\")") t9; y < 10 && x == 0 && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t9 < 5 && t9 < 10 && t7 == t9 + t9 }) || (exists { irep("(\"bv\")") t6; t9 < 10 && t7 == t9 && !(t9 < 5) })) }) }) || (exists { irep("(\"bv\")") t11; x == 10 && (exists { irep("(\"bv\")") t7; y == t7 + 1 && ((exists { irep("(\"bv\")") t4; t11 < 5 && t11 < 10 && t7 == t11 + t11 }) || (exists { irep("(\"bv\")") t6; t11 < 10 && t7 == t11 && !(t11 < 5) })) }) && !(y < 10) }) ==> x != 0)
wp expression after converting to z3: (let ((a!1 (exists ((t11 (_ BitVec 32)))
             (let ((a!1 (exists ((t7 (_ BitVec 32)))
                          (let ((a!1 (exists ((t4 (_ BitVec 32)))
                                       (and (bvslt t11 #x00000005)
                                            (bvslt t11 #x0000000a)
                                            (= t7 (bvadd t11 t11)))))
                                (a!2 (exists ((t6 (_ BitVec 32)))
                                       (and (bvslt t11 #x0000000a)
                                            (= t7 t11)
                                            (not (bvslt t11 #x00000005))))))
                            (and (= y (bvadd t7 #x00000001)) (or a!1 a!2))))))
               (and (= x #x0000000a) a!1 (not (bvslt y #x0000000a)))))))
(let ((a!2 (or (exists ((t9 (_ BitVec 32)))
                 (let ((a!1 (exists ((t7 (_ BitVec 32)))
                              (let ((a!1 (exists ((t4 (_ BitVec 32)))
                                           (and (bvslt t9 #x00000005)
                                                (bvslt t9 #x0000000a)
                                                (= t7 (bvadd t9 t9)))))
                                    (a!2 (exists ((t6 (_ BitVec 32)))
                                           (and (bvslt t9 #x0000000a)
                                                (= t7 t9)
                                                (not (bvslt t9 #x00000005))))))
                                (and (= y (bvadd t7 #x00000001)) (or a!1 a!2))))))
                   (and (bvslt y #x0000000a) (= x #x00000000) a!1)))
               a!1)))
  (not (=> a!2 (distinct x #x00000000)))))
UNSAT core: (ast-vector
  ans_lit
  x4)
UNSAT core: (ast-vector
  ans_lit
  x8)
UNSAT core: (ast-vector
  ans_lit
  x16)
SAT! Model: 
(define-fun t74 () Bool
  true)
(define-fun t114 () Bool
  true)
(define-fun x16 () Bool
  false)
(define-fun y () (_ BitVec 32)
  #xfffffff1)
(define-fun t4 () (_ BitVec 32)
  #xfffffff0)
(define-fun x8 () Bool
  false)
(define-fun t9!0 () (_ BitVec 32)
  #xfffffff8)
(define-fun ans_lit () Bool
  true)
(define-fun t7!1 () (_ BitVec 32)
  #xfffffff0)
(define-fun t6 () (_ BitVec 32)
  #xfffffff0)
(define-fun t44 () Bool
  true)
(define-fun t64 () Bool
  true)
(define-fun t7 () (_ BitVec 32)
  #xfffffff0)
(define-fun t9 () (_ BitVec 32)
  #xfffffff0)
(define-fun t11 () (_ BitVec 32)
  #xfffffff0)
(define-fun y4 () Bool
  true)
(define-fun x4 () Bool
  false)
(define-fun x32 () Bool
  true)
(define-fun x () (_ BitVec 32)
  #x00000000)
(define-fun t94 () Bool
  true)
VERIFICATION FAILED
Command exited with non-zero status 10
	Command being timed: "./check_wp ../../tests/if_sat3.c"
	User time (seconds): 0.14
	System time (seconds): 0.00
	Percent of CPU this job got: 94%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.15
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 33376
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 5410
	Voluntary context switches: 9
	Involuntary context switches: 4
	Swaps: 0
	File system inputs: 0
	File system outputs: 8
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 10
