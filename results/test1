afzal@afzal-350V5C-351V5C-3540VC-3440VC:~/Documents/Study material/Msc CS/SMT/major_Project/sp_z3_new/src/check_wp$ /usr/bin/time -v ./check_wp ../../tests/test1.c 
file ../../tests/test1.c: Parsing
file <command-line> line 0: <command-line>:0:0: warning: "__STDC_VERSION__" redefined
file <command-line> line 0: <built-in>: note: this is the location of the previous definition
Converting
Type-checking test1
SP in assume is TRUE && 1 == 1
Equel exp is y == 5
sp in one step is exists { irep("(\"bv\")") t3; y == 5 && TRUE }
Equel exp is x == y
sp in one step is exists { irep("(\"bv\")") t4; x == y && (exists { irep("(\"bv\")") t3; y == 5 }) }
before else sp is x > 6 && !(x < 5) && (exists { irep("(\"bv\")") t4; x == y && (exists { irep("(\"bv\")") t3; y == 5 }) })
Equel exp is x == t8 * 2
sp in one step is exists { irep("(\"bv\")") t8; x == t8 * 2 && t8 > 6 && !(t8 < 5) && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) }
Equel exp is y == t11 + 1
sp in one step is exists { irep("(\"bv\")") t11; y == t11 + 1 && t11 < 20 && t11 > 10 && (exists { irep("(\"bv\")") t8; x == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == t11 && (exists { irep("(\"bv\")") t3; t11 == 5 }) }) && !(t8 < 5) }) }
before else sp is !(y < 20) && y > 10 && (exists { irep("(\"bv\")") t8; x == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) })
Equel exp is x == t13 - 1
sp in one step is exists { irep("(\"bv\")") t13; x == t13 - 1 && !(y < 20) && y > 10 && (exists { irep("(\"bv\")") t8; t13 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) }) }
Equel exp is x == t14 + 1
sp in one step is exists { irep("(\"bv\")") t14; x == t14 + 1 && ((exists { irep("(\"bv\")") t13; t14 == t13 - 1 && y > 10 && (exists { irep("(\"bv\")") t8; t13 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) }) && !(y < 20) }) || !(y > 10) && (exists { irep("(\"bv\")") t8; t14 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) })) }
Strongest postcondition is (exists { irep("(\"bv\")") t14; x == t14 + 1 && ((exists { irep("(\"bv\")") t13; t14 == t13 - 1 && y > 10 && (exists { irep("(\"bv\")") t8; t13 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) }) && !(y < 20) }) || !(y > 10) && (exists { irep("(\"bv\")") t8; t14 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) })) }) || x < 5 && (exists { irep("(\"bv\")") t4; x == y && (exists { irep("(\"bv\")") t3; y == 5 }) })
Assert is x <= 10
Final sp is (exists { irep("(\"bv\")") t14; x == t14 + 1 && ((exists { irep("(\"bv\")") t13; t14 == t13 - 1 && y > 10 && (exists { irep("(\"bv\")") t8; t13 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) }) && !(y < 20) }) || !(y > 10) && (exists { irep("(\"bv\")") t8; t14 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) })) }) || x < 5 && (exists { irep("(\"bv\")") t4; x == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) ==> x <= 10

wp expression after cbmc phase: !((exists { irep("(\"bv\")") t14; x == t14 + 1 && ((exists { irep("(\"bv\")") t13; t14 == t13 - 1 && y > 10 && (exists { irep("(\"bv\")") t8; t13 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) }) && !(y < 20) }) || !(y > 10) && (exists { irep("(\"bv\")") t8; t14 == t8 * 2 && t8 > 6 && (exists { irep("(\"bv\")") t4; t8 == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) && !(t8 < 5) })) }) || x < 5 && (exists { irep("(\"bv\")") t4; x == y && (exists { irep("(\"bv\")") t3; y == 5 }) }) ==> x <= 10)
wp expression after converting to z3: (let ((a!1 (exists ((t14 (_ BitVec 32)))
             (let ((a!1 (exists ((t13 (_ BitVec 32)))
                          (let ((a!1 (exists ((t8 (_ BitVec 32)))
                                       (and (= t13 (bvmul t8 #x00000002))
                                            (bvsgt t8 #x00000006)
                                            (exists ((t4 (_ BitVec 32)))
                                              (let ((a!1 (exists ((t3 (_ BitVec
                                                                         32)))
                                                           (= y #x00000005))))
                                                (and (= t8 y) a!1)))
                                            (not (bvslt t8 #x00000005))))))
                            (and (= t14 (bvsub t13 #x00000001))
                                 (bvsgt y #x0000000a)
                                 a!1
                                 (not (bvslt y #x00000014))))))
                   (a!2 (exists ((t8 (_ BitVec 32)))
                          (and (= t14 (bvmul t8 #x00000002))
                               (bvsgt t8 #x00000006)
                               (exists ((t4 (_ BitVec 32)))
                                 (let ((a!1 (exists ((t3 (_ BitVec 32)))
                                              (= y #x00000005))))
                                   (and (= t8 y) a!1)))
                               (not (bvslt t8 #x00000005))))))
             (let ((a!3 (or a!1 (and (not (bvsgt y #x0000000a)) a!2))))
               (and (= x (bvadd t14 #x00000001)) a!3)))))
      (a!2 (and (bvslt x #x00000005)
                (exists ((t4 (_ BitVec 32)))
                  (let ((a!1 (exists ((t3 (_ BitVec 32))) (= y #x00000005))))
                    (and (= x y) a!1))))))
  (not (=> (or a!1 a!2) (bvsle x #x0000000a))))
UNSAT core: (ast-vector
  ans_lit
  x4)
UNSAT core: (ast-vector
  ans_lit
  x8)
UNSAT core: (ast-vector
  ans_lit
  x16)
UNSAT core: (ast-vector
  ans_lit
  y4)
UNSAT core: (ast-vector
  ans_lit
  y8)
UNSAT core: (ast-vector
  ans_lit
  y16)
UNSAT core: (ast-vector
  ans_lit)
No assumptions were found. Program is safe.
VERIFICATION SUCCESSFUL
	Command being timed: "./check_wp ../../tests/test1.c"
	User time (seconds): 0.13
	System time (seconds): 0.00
	Percent of CPU this job got: 79%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.18
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 33096
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 5413
	Voluntary context switches: 10
	Involuntary context switches: 6
	Swaps: 0
	File system inputs: 8
	File system outputs: 8
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
